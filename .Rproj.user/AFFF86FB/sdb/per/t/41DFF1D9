{
    "collab_server" : "",
    "contents" : "library(zoo)\nlibrary(data.table)\nlibrary(quantmod)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(grid)\nlibrary(TTR)\nlibrary(scales)\nlibrary(lubridate)\nlibrary(shiny)\nlibrary(DT)\nlibrary(ggvis)\nlibrary(reshape2)\nlibrary(xts)\nlibrary(curl)\n\nshinyServer(function(input, output,session){\n        \n        #Loads the data based on selected share price and date range\n        input_data <- reactive({\n                withProgress(message = 'Downloading Stock Data', value = 0, {\n                        for (i in 1:15) {\n                                incProgress(1/15)\n                                Sys.sleep(0.1)\n                        }\n                })\n                apiCall <- paste(\"https://www.quandl.com/api/v3/datatables/WIKI/PRICES.csv?ticker=\", input$ticker,\n                                 \"&qopts.columns=date,open,high,low,close,volume&api_key=Xa-XyezxZxsEZpmhKYkt\",sep=\"\")\n                x <- fread(apiCall)\n                #x$date <- as.Date(x$date)\n                x\n                })\n        #Takes input data, runs through the creation of ma's and other trading indicators, outputs df\n        cutdata <- reactive({\n                x <- input_data()\n                withProgress(message = 'Computing Indicators', value = 0, {\n                        for (i in 1:15) {\n                                incProgress(1/15)\n                                Sys.sleep(0.1)\n                        }\n                })\n                colnames(x) <- c(\"Date\",\"Open\",\"High\",\"Low\",\"Close\",\"Volume\")\n                x$MA <- SMA(x = x$Close,n=input$smaval)\n                x$MA <- round(x$MA,2)\n                x$EMA <- EMA(x = x$Close,n=input$emaval)\n                x$EMA <- round(x$EMA,2)\n                #boll <- BBands(HLC = x[,c(3,4,5)],n = input$bollval)\n                #x <- cbind(x,boll)\n                x$RSI <- RSI(x$Close)\n                x$EMA12 <- EMA(x = x$Close,n = 12)\n                x$EMA26 <- EMA(x = x$Close,n = 26)\n                x$MACD <- x$EMA12 - x$EMA26\n                x$SIGNAL <- EMA(x = x$MACD,n = 9)\n                mfi <- MFI(HLC = x[,c(\"High\",\"Low\",\"Close\")],x[,\"Volume\"],n=14)\n                x <- cbind(x,mfi)\n                #cutdata <- x[(x$date >= as.Date(input$dates[1],format=\"%Y-%m-%d\")) & (x$date <= as.Date(input$dates[2],format=\"%Y-%m-%d\")),]\n                x$Date <- as.Date(x$Date,format=\"%Y-%m-%d\")\n                x <- na.exclude(x)\n                x <- xts(x,x$Date)\n                })\n        \n        # Stock Graphs\n        output$candlestick<- renderDygraph({\n                source('sharePricePlot.R')\n                data <- cutdata()\n                chart <- sharePricePlot(data)\n                return(chart)\n        })\n        \n        output$technicals<- renderDygraph({\n                source('technicalChart.R')\n                data <- cutdata()\n                chart <- technicalChart(data)\n                return(chart)\n        })\n\n        # Copper Graphs\n        output$COTGraph<- renderDygraph({\n                source('copperCOTC.R')\n                chart <- COTGraph()\n                return(chart)\n        })\n        output$LMEInvGraph<- renderDygraph({\n                source('copperCOTC.R')\n                chart <- LMEInvGraph()\n                return(chart)\n        })\n        output$BackwardationGraph<- renderDygraph({\n                source('copperCOTC.R')\n                chart <- BackwardationGraph()\n                return(chart)\n        })\n        \n        #Copper News Analysis\n        output$newsDF <- renderDataTable({\n                source('copperNews.R')\n                newsDF <- copperNewsDT()\n                return(newsDF)\n        })\n        \n\n\n})\n\n\n\n\n\n\n\n\n",
    "created" : 1495271945755.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "19|32|31|16|\n33|29|59|16|\n36|41|39|24|\n77|41|81|8|\n82|44|86|8|\n87|51|91|8|\n94|42|98|8|\n",
    "hash" : "2437244367",
    "id" : "41DFF1D9",
    "lastKnownWriteTime" : 1495724951,
    "last_content_update" : 1495724951701,
    "path" : "~/Desktop/AheadOfTheCurve/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}