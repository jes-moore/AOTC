library(shiny)
shinApp()
shiyApp()
runApp()
runApp()
runApp()
runApp()
input = list()
input$ticker = 'fb'
apiCall <- paste("https://www.quandl.com/api/v3/datatables/WIKI/PRICES.csv?ticker=", input$ticker,
"&qopts.columns=date,open,high,low,close,volume&api_key=Xa-XyezxZxsEZpmhKYkt",sep="")
x <- fread(apiCall)
x
colnames(x) <- c("Date","Open","High","Low","Close","Volume")
x$MA <- SMA(x = x$Close,n=input$smaval)
x
runApp()
apiCall <- paste("https://www.quandl.com/api/v3/datatables/WIKI/PRICES.csv?ticker=", input$ticker,
"&qopts.columns=date,open,high,low,close,volume&api_key=Xa-XyezxZxsEZpmhKYkt",sep="")
x <- fread(apiCall)
colnames(x) <- c("Date","Open","High","Low","Close","Volume")
input$smaval = 50
input$emaval = 50
colnames(x) <- c("Date","Open","High","Low","Close","Volume")
x$MA <- SMA(x = x$Close,n=input$smaval)
x$MA <- round(x$MA,2)
x$EMA <- EMA(x = x$Close,n=input$emaval)
x$EMA <- round(x$EMA,2)
x$RSI <- RSI(x$Close)
x$EMA12 <- EMA(x = x$Close,n = 12)
x$EMA26 <- EMA(x = x$Close,n = 26)
x$MACD <- x$EMA12 - x$EMA26
x$SIGNAL <- EMA(x = x$MACD,n = 9)
mfi <- MFI(HLC = x[,c("High","Low","Close")],x[,"Volume"],n=14)
x <- cbind(x,mfi)
x$Date <- as.Date(x$Date,format="%Y-%m-%d")
x <- na.exclude(x)
x <- xts(x,x$Date)
x
runApp()
runApp()
runApp()
?candlestick
?dyCandlestick
runApp()
runApp()
shiny::runApp()
install.packages('shiny')
library(shiny)
runApp()
library(data.table)
library(data.table)
library(data.table)
library(data.table)
library(data.table)
library(quantmod)
library(quantmod)
library(quantmod)
library(quantmod)
install.packages('quantmod')
library(quantmod)
library(ggplot2)
library(dplyr)
library(grid)
library(TTR)
library(scales)
library(lubridate)
library(shiny)
library(DT)
library(ggvis)
library(dygraphs)
library(rCharts)
library(curl)
?install.packages
install.packages(c('xts','TTR','scales','ggvis','dygraphs','rCharts')
)
install.packages(c("xts", "TTR", "scales", "ggvis", "dygraphs", "rCharts"))
library(data.table)
library(quantmod)
library(ggplot2)
library(dplyr)
library(grid)
library(TTR)
library(scales)
library(lubridate)
library(shiny)
library(DT)
library(ggvis)
library(dygraphs)
library(rCharts)
library(curl)
install.packages(c('lubridate'))
library(lubridate)
library(data.table)
library(quantmod)
install.packages('quantmod')
library(quantmod)
install.packages('installr')
library(updateR)
library(updater)
library(installr)
updateR()
install.packages(c("assertthat", "curl", "data.table", "DBI", "devtools", "DiagrammeR", "digest", "htmltools", "irlba", "jsonlite", "knitr", "markdown", "memoise", "R6", "Rcpp", "stringi", "stringr", "tensorflow", "tibble", "viridis", "XML"))
install.packages('data.table')
library(data.table)
install.packages('ggplot2')
install.packages('dplyr')
install.packages('lubridate')
install.packages('shiny')
install.packages('DT')
install.packages('dygraphs')
install.packages('curl')
install.packages('zoo')
library(quantmod)
install.packages('RMySQL')
install.packages('curl')
install.packages('xts')
install.packages("xts")
install.packages('reshape2')
library(zoo)
library(zoo)
library(data.table)
library(quantmod)
library(dplyr)
library(lubridate)
library(shiny)
library(DT)
library(reshape2)
library(xts)
library(curl)
library(dygraphs)
library(RMySQL)
runApp()
install.packages('dplyr')
runApp()
install.packages('rCharts')
runApp()
install.packages('Quandl')
runApp()
install.packages('XML')
runApp()
install.packages('feedeR')
runApp()
<<<<<<< HEAD
shiny::runApp
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(finreportr)
AnnualReports('fb')
GetBalanceSheet("FB")
GetBalanceSheet("FB",2016)
GetBalanceSheet("FB",2017)
GetBalanceSheet("FB",c(2017,2016,2015,2014)
GetBalanceSheet("FB", 2017)
GetBalanceSheet("FB",c(2017,2016,2015,2014))
install.packages('tidyquant')
library(tidyquant)
my.ticker <- 'AAPL'
my.df <- tq_get(my.ticker,get = "stock.prices")
print(tail(my.df))
df.key.ratios <- tq_get("AAPL",get = "key.ratios")
df.key.ratios
df.key.ratios$data[[2]]
df.profitability <- df.key.ratios$data[[2]]
View(df.profitability)
=======
shiny::runaa
shiny::runApp()
>>>>>>> 90b309479cc3dabf0e1795f74f8db7013b98738b
